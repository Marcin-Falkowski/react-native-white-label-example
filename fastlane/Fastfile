# frozen_string_literal: true

platform :android do
  desc '.apk file for Main App'
  lane :main_app__apk_build do
    gradle(task: 'clean', project_dir: './android')
    gradle(task: 'assemble', flavor: 'mainApp', build_type: 'Release', project_dir: './android')
    # supply(track: 'beta', abb: './android/app/build/outputs/apk/app-beta-release.apk')
  end
  desc '.apk file for First WLA'
  lane :firstWLA_app_apk_build do
    gradle(task: 'clean', project_dir: './android')
    gradle(task: 'assemble', flavor: 'firstWLA', build_type: 'Release', project_dir: './android')
    # supply(track: 'beta', abb: './android/app/build/outputs/apk/app-beta-release.apk')
  end
  desc '.apk file for Second WLA'
  lane :secondWLA_app_apk_build do
    gradle(task: 'clean', project_dir: './android')
    gradle(task: 'assemble', flavor: 'secondWLA', build_type: 'Release', project_dir: './android')
    # supply(track: 'beta', abb: './android/app/build/outputs/apk/app-beta-release.apk')
  end
    desc '.aab file for Main App'
  lane :main_app_production_build do
    gradle(task: 'clean', project_dir: './android')
    gradle(task: 'bundle', flavor: 'mainApp', build_type: 'Release', project_dir: './android')
    # supply(track: 'beta', abb: './android/app/build/outputs/apk/app-beta-release.apk')
  end
  desc '.aab file for First WLA'
  lane :firstWLA_app_production_build do
    gradle(task: 'clean', project_dir: './android')
    gradle(task: 'bundle', flavor: 'firstWLA', build_type: 'Release', project_dir: './android')
    # supply(track: 'beta', abb: './android/app/build/outputs/apk/app-beta-release.apk')
  end
  desc '.aab file for Second WLA'
  lane :secondWLA_app_production_build do
    gradle(task: 'clean', project_dir: './android')
    gradle(task: 'bundle', flavor: 'secondWLA', build_type: 'Release', project_dir: './android')
    # supply(track: 'beta', abb: './android/app/build/outputs/apk/app-beta-release.apk')
  end
end
platform :ios do
  desc "Build and run Main App on Simulator"
  lane :main_app_simulator do
    increment_build_number(xcodeproj: "YourApp.xcodeproj")
    build_app(
      scheme: "MainAppScheme",
      configuration: "Debug",
      destination: "generic/platform=iOS Simulator",
      skip_archive: true
    )
    run_tests(
      scheme: "MainAppScheme",
      devices: ["iPhone 15"]
    )
  end

  desc "Build and run First WLA on Simulator"
  lane :first_wla_simulator do
    increment_build_number(xcodeproj: "YourApp.xcodeproj")
    build_app(
      scheme: "FirstWLAScheme",
      configuration: "Debug",
      destination: "generic/platform=iOS Simulator",
      skip_archive: true
    )
    run_tests(
      scheme: "FirstWLAScheme",
      devices: ["iPhone 15"] 
    )
  end

  desc "Build and run Second WLA on Simulator"
  lane :second_wla_simulator do
    increment_build_number(xcodeproj: "YourApp.xcodeproj")
    build_app(
      scheme: "SecondWLAScheme",
      configuration: "Debug",
      destination: "generic/platform=iOS Simulator",
      skip_archive: true
    )
    run_tests(
      scheme: "SecondWLAScheme",
      devices: ["iPhone 15"] 
    )
  end
  desc "Build Main App without deployment"
  lane :main_app_build_local do
    increment_build_number(xcodeproj: "React_Native_WLA.xcodeproj")
    build_app(
      scheme: "React_Native_WLA",
      configuration: "Release",
      export_method: "development",
      export_options: {
        provisioningProfiles: {
          "com.mainApp" => "MainApp_Development_Provisioning_Profile"
        }
      }
  )
  end
    desc "Build First WLA without deployment"
  lane :main_app_build_local do
    increment_build_number(xcodeproj: "React_Native_WLA.xcodeproj")
    build_app(
      scheme: "FirstWLA",
      configuration: "Release",
      export_method: "development",
      export_options: {
        provisioningProfiles: {
          "com.firstWLA" => "MainApp_Development_Provisioning_Profile"
        }
      }
  )
  end
  desc "Build Second WLA without deployment"
  lane :main_app_build_local do
    increment_build_number(xcodeproj: "React_Native_WLA.xcodeproj")
    build_app(
      scheme: "SecondWLA",
      configuration: "Release",
      export_method: "development",
      export_options: {
        provisioningProfiles: {
          "com.secondWLA" => "MainApp_Development_Provisioning_Profile"
        }
      }
  )
  end
end